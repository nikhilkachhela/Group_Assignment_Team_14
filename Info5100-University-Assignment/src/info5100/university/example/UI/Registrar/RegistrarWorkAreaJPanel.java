/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UI.Registrar;

import info5100.university.example.AccessControl.AuthenticationService;
import info5100.university.example.AccessControl.UserDirectory;
import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseCatalog.CourseCatalog;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department;
import info5100.university.example.Finance.FinanceManager;
import info5100.university.example.Finance.TuitionAccount;
import info5100.university.example.Finance.FinancialReport;  // ADD THIS IF MISSING
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.StudentProfile;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;  
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author dives
 */
public class RegistrarWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RegistrarWorkAreaJPanel
     */
    private Department department;
    private UserDirectory userDirectory;
    private FinanceManager financeManager;
    private JPanel cardPanel;
    private AuthenticationService authService;
    private FacultyDirectory facultyDirectory;
    
    private HashMap<String, String> courseRooms;
    private HashMap<String, String> courseSchedules;
    private final HashMap<String, EnrollmentInfo> enrollmentTracker;
    // Profile data storage
    private String savedEmail;
    private String savedPhone;
    private String savedOffice;
    private String savedHours;
    private String savedDepartment;
    
    
    
    public RegistrarWorkAreaJPanel(Department dept, UserDirectory userDir, 
                                   FinanceManager finMgr, 
                                   JPanel parentCardPanel,
                                   AuthenticationService auth) {
                
        
        this.department = dept;
        this.userDirectory = userDir;
        this.financeManager = finMgr;
        this.cardPanel = parentCardPanel;
        this.authService = auth;
        this.facultyDirectory = new FacultyDirectory(dept);
        initComponents();
        
        setupTab1();
        setupTab2();
        setupTab3();
        setupTab4();
        setupTab5();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registrarTabs = new javax.swing.JTabbedPane();
        panelCourseOfferings = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        btnSetSchedule = new javax.swing.JButton();
        btnRefreshCourses = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnCreateOffer = new javax.swing.JButton();
        btnAssignFaculty = new javax.swing.JButton();
        btnUpdateCapacity = new javax.swing.JButton();
        btnDeleteOffer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourseOffers = new javax.swing.JTable();
        panelEnrollment = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbEnrollSemester = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbEnrollCourse = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        btnEnrollStudent = new javax.swing.JButton();
        btnDropStudent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEnrollment = new javax.swing.JTable();
        panelFinancials = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cmbFinancialSemester = new javax.swing.JComboBox<>();
        btnRefreshFinancial = new javax.swing.JButton();
        btnGenerateReport = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        lblTotalRevenue = new javax.swing.JLabel();
        lblTotalOutstanding = new javax.swing.JLabel();
        lblPaymentRate = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFinancials = new javax.swing.JTable();
        panelReports = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmbReportType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cmbReportSemester = new javax.swing.JComboBox<>();
        btnGenerateReportData = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblReports = new javax.swing.JTable();
        panelProfile = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        btnEditProfile = new javax.swing.JButton();
        btnSaveProfile = new javax.swing.JButton();
        btnCancelProfile = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txtProfileName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtProfileId = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtProfileEmail = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtProfilePhone = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtProfileOffice = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtProfileHours = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtProfileDepartment = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        panelCourseOfferings.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Semester");
        jPanel1.add(jLabel1);

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(cmbSemester);

        btnSetSchedule.setText("Set Schedule");
        btnSetSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetScheduleActionPerformed(evt);
            }
        });
        jPanel1.add(btnSetSchedule);

        btnRefreshCourses.setText("Refresh");
        btnRefreshCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshCoursesActionPerformed(evt);
            }
        });
        jPanel1.add(btnRefreshCourses);

        panelCourseOfferings.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        btnCreateOffer.setText("Create Offer");
        btnCreateOffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateOfferActionPerformed(evt);
            }
        });
        jPanel2.add(btnCreateOffer);

        btnAssignFaculty.setText("Assign Faculty");
        btnAssignFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignFacultyActionPerformed(evt);
            }
        });
        jPanel2.add(btnAssignFaculty);

        btnUpdateCapacity.setText("Update Capacity");
        btnUpdateCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCapacityActionPerformed(evt);
            }
        });
        jPanel2.add(btnUpdateCapacity);

        btnDeleteOffer.setText("Delete Offer");
        btnDeleteOffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOfferActionPerformed(evt);
            }
        });
        jPanel2.add(btnDeleteOffer);

        panelCourseOfferings.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        tblCourseOffers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Course No", "Course Name", "Faculty", "Capacity", "Enrolled", "Room", "Schedule"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourseOffers);

        panelCourseOfferings.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        registrarTabs.addTab("Course Offerings", panelCourseOfferings);

        panelEnrollment.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Semester");
        jPanel3.add(jLabel2);

        cmbEnrollSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(cmbEnrollSemester);

        jLabel3.setText("Course");
        jPanel3.add(jLabel3);

        cmbEnrollCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(cmbEnrollCourse);

        panelEnrollment.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        btnEnrollStudent.setText("Enroll Student");
        btnEnrollStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollStudentActionPerformed(evt);
            }
        });
        jPanel4.add(btnEnrollStudent);

        btnDropStudent.setText("Drop Student");
        btnDropStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropStudentActionPerformed(evt);
            }
        });
        jPanel4.add(btnDropStudent);

        panelEnrollment.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        tblEnrollment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Student Name", "Course Number", "Course Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblEnrollment);

        panelEnrollment.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        registrarTabs.addTab("Enrollment", panelEnrollment);

        panelFinancials.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Semester");
        jPanel5.add(jLabel4);

        cmbFinancialSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel5.add(cmbFinancialSemester);

        btnRefreshFinancial.setText("Refresh");
        jPanel5.add(btnRefreshFinancial);

        btnGenerateReport.setText("Generate Report");
        jPanel5.add(btnGenerateReport);

        panelFinancials.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel6.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        lblTotalRevenue.setText("Total Revenue: $0.00");
        jPanel6.add(lblTotalRevenue);

        lblTotalOutstanding.setText("Total Outstanding: $0.00");
        jPanel6.add(lblTotalOutstanding);

        lblPaymentRate.setText("Payment Rate: 0%");
        jPanel6.add(lblPaymentRate);

        panelFinancials.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        tblFinancials.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Student Name", "Total Charged", "Total Paid", "Balance", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblFinancials);

        panelFinancials.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        registrarTabs.addTab("Financials", panelFinancials);

        panelReports.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Report Type");
        jPanel7.add(jLabel5);

        cmbReportType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel7.add(cmbReportType);

        jLabel6.setText("Semester");
        jPanel7.add(jLabel6);

        cmbReportSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel7.add(cmbReportSemester);

        btnGenerateReportData.setText("Generate");
        jPanel7.add(btnGenerateReportData);

        panelReports.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        tblReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Category", "Value", "Count", "Percentage", "Details"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblReports);

        panelReports.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        registrarTabs.addTab("Reports", panelReports);

        panelProfile.setLayout(new java.awt.BorderLayout());

        btnEditProfile.setText("Edit Profile");

        btnSaveProfile.setText("Save Changes");

        btnCancelProfile.setText("Cancel");
        btnCancelProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelProfileActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(btnEditProfile)
                .addGap(18, 18, 18)
                .addComponent(btnSaveProfile)
                .addGap(18, 18, 18)
                .addComponent(btnCancelProfile)
                .addGap(18, 18, 18)
                .addComponent(btnLogout)
                .addContainerGap(131, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditProfile)
                    .addComponent(btnSaveProfile)
                    .addComponent(btnCancelProfile)
                    .addComponent(btnLogout))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        panelProfile.add(jPanel9, java.awt.BorderLayout.PAGE_END);

        jLabel14.setText("Name");

        jLabel15.setText("Employee ID");

        jLabel16.setText("Email");

        jLabel17.setText("Phone");

        jLabel18.setText("Office");

        jLabel19.setText("Office Hours");

        jLabel20.setText("Department");

        txtProfileDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfileDepartmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfileName, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfileId, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfileEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfilePhone, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfileOffice, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfileHours, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtProfileDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfileName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfileId, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfileEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfilePhone, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfileOffice, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfileHours, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfileDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panelProfile.add(jPanel10, java.awt.BorderLayout.CENTER);

        registrarTabs.addTab("Profile", panelProfile);

        add(registrarTabs, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtProfileDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfileDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfileDepartmentActionPerformed

    private void btnCancelProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelProfileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelProfileActionPerformed

    private void btnCreateOfferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateOfferActionPerformed
        // TODO add your handling code here:
        // Get course catalog
        CourseCatalog catalog = department.getCourseCatalog();
        ArrayList<Course> courses = catalog.getCourseList();
        
        // Validation: Check if courses exist
        if (courses.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No courses available in catalog!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // STEP 1: Let user select a course
        String[] options = new String[courses.size()];
        for (int i = 0; i < courses.size(); i++) {
            Course c = courses.get(i);
            options[i] = c.getCOurseNumber() + " - " + c.getCourseName();
        }
        
        String selected = (String) JOptionPane.showInputDialog(
            this,
            "Select course to offer:",
            "Step 1: Select Course",
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
        );
        
        if (selected == null) return;
        
        // Extract course number
        String courseNumber = selected.split(" - ")[0];
        
        // STEP 2: Get enrollment capacity
        String capacityStr = JOptionPane.showInputDialog(
            this,
            "Enter seat capacity (5-50):",
            "Step 2: Set Capacity",
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (capacityStr == null) return;
        
        // Validate and create offer
        try {
            int capacity = Integer.parseInt(capacityStr.trim());
            
            // Validation: Check capacity range
            if (capacity < 5 || capacity > 50) {
                JOptionPane.showMessageDialog(this,
                    "Capacity must be between 5 and 50!",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Get or create schedule
            String semester = (String) cmbSemester.getSelectedItem();
            CourseSchedule schedule = department.getCourseSchedule(semester);
            
            if (schedule == null) {
                schedule = department.newCourseSchedule(semester);
            }
            
            // Create course offer
            CourseOffer offer = schedule.newCourseOffer(courseNumber);
            
            // Validation: Check for duplicates
            if (offer == null) {
                JOptionPane.showMessageDialog(this,
                    "This course already exists in " + semester + "!",
                    "Duplicate Course",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Generate seats
            offer.generatSeats(capacity);
            
            // Show success message
            JOptionPane.showMessageDialog(this,
                "Course offer created successfully!\n\n" +
                "Course: " + courseNumber + "\n" +
                "Semester: " + semester + "\n" +
                "Capacity: " + capacity + " seats",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh table
            loadCourseData();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                "Please enter a valid number!",
                "Invalid Input",
                JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCreateOfferActionPerformed

    private void btnAssignFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignFacultyActionPerformed
        // TODO add your handling code here:
        int row = tblCourseOffers.getSelectedRow();
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a course from the table first!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get course information
        String courseNumber = (String) tblCourseOffers.getValueAt(row, 0);
        String courseName = (String) tblCourseOffers.getValueAt(row, 1);
        
        // Get course offer
        String semester = (String) cmbSemester.getSelectedItem();
        CourseSchedule schedule = department.getCourseSchedule(semester);
        CourseOffer offer = schedule.getCourseOfferByNumber(courseNumber);
        
        // Get faculty list
        ArrayList<FacultyProfile> faculties = facultyDirectory.getAllFaculty();
        
        // Validation: Check if faculty available
        if (faculties == null || faculties.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No faculty members available!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Create faculty options
        String[] options = new String[faculties.size()];
        for (int i = 0; i < faculties.size(); i++) {
            options[i] = "Faculty " + (i + 1);
        }
        
        // Let user select faculty
        String selected = (String) JOptionPane.showInputDialog(
            this,
            "Assign faculty to: " + courseNumber + " - " + courseName + "\n\nSelect faculty member:",
            "Assign Faculty",
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
        );
        
        if (selected == null) return;
        
        // Get selected faculty and assign
        int index = Integer.parseInt(selected.split(" ")[1]) - 1;
        FacultyProfile faculty = faculties.get(index);
        offer.AssignAsTeacher(faculty);
        
        // Show success
        JOptionPane.showMessageDialog(this,
            "Faculty assigned successfully!\n\n" +
            "Course: " + courseNumber,
            "Success",
            JOptionPane.INFORMATION_MESSAGE);
        
        // Refresh table
        loadCourseData();
        
    }//GEN-LAST:event_btnAssignFacultyActionPerformed

    private void btnUpdateCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCapacityActionPerformed
        // TODO add your handling code here:
        // Validation: Check if row selected
        int row = tblCourseOffers.getSelectedRow();
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a course first!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get current data
        String courseNumber = (String) tblCourseOffers.getValueAt(row, 0);
        int currentCapacity = (int) tblCourseOffers.getValueAt(row, 3);
        int enrolled = (int) tblCourseOffers.getValueAt(row, 4);
        
        // Ask for new capacity
        String input = JOptionPane.showInputDialog(
            this,
            "Course: " + courseNumber + "\n\n" +
            "Current Capacity: " + currentCapacity + " seats\n" +
            "Enrolled Students: " + enrolled + " students\n\n" +
            "Enter new capacity (minimum " + enrolled + "):",
            "Update Capacity",
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (input == null) return;
        
        try {
            int newCapacity = Integer.parseInt(input.trim());
            
            // Validation: Check minimum
            if (newCapacity < enrolled) {
                JOptionPane.showMessageDialog(this,
                    "New capacity cannot be less than enrolled students!",
                    "Invalid Capacity",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Validation: Check range
            if (newCapacity < 5 || newCapacity > 100) {
                JOptionPane.showMessageDialog(this,
                    "Capacity must be between 5 and 100!",
                    "Invalid Range",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Update capacity
            String semester = (String) cmbSemester.getSelectedItem();
            CourseSchedule schedule = department.getCourseSchedule(semester);
            CourseOffer offer = schedule.getCourseOfferByNumber(courseNumber);
            
            // Add seats if needed
            int seatsToAdd = newCapacity - currentCapacity;
            if (seatsToAdd > 0) {
                offer.generatSeats(seatsToAdd);
            }
            
            // Show success
            JOptionPane.showMessageDialog(this,
                "Capacity updated successfully!\n\n" +
                "Course: " + courseNumber + "\n" +
                "Old: " + currentCapacity + " → New: " + newCapacity,
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh table
            loadCourseData();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                "Please enter a valid number!",
                "Invalid Input",
                JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnUpdateCapacityActionPerformed

    private void btnDeleteOfferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOfferActionPerformed
        // TODO add your handling code here:
        // Validation: Check if user selected a row from table
        int row = tblCourseOffers.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a course from the table first!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get course information from selected row
        String courseNumber = (String) tblCourseOffers.getValueAt(row, 0);
        String courseName = (String) tblCourseOffers.getValueAt(row, 1);
        int enrolled = (int) tblCourseOffers.getValueAt(row, 4);

        // Validation: Cannot delete if students are enrolled
        // Must drop all students first to maintain data integrity
        if (enrolled > 0) {
            JOptionPane.showMessageDialog(this,
                "Cannot delete this course!\n\n" +
                "Course: " + courseNumber + "\n" +
                "Enrolled Students: " + enrolled + "\n\n" +
                "Please drop all students before deleting the course.",
                "Cannot Delete",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ask user to confirm deletion
        // This prevents accidental deletions
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete this course?\n\n" +
            "Course: " + courseNumber + "\n" +
            "Name: " + courseName + "\n\n" +
            "This action cannot be undone.",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        // If user clicked "Yes", proceed with deletion
        if (confirm == JOptionPane.YES_OPTION) {
            // Get current semester and course schedule
            String semester = (String) cmbSemester.getSelectedItem();
            CourseSchedule schedule = department.getCourseSchedule(semester);

            // Attempt to delete the course offer from backend
            boolean deleted = schedule.deleteCourseOffer(courseNumber);

            if (deleted) {
                // Deletion successful - also remove room and schedule data
                courseRooms.remove(courseNumber);
                courseSchedules.remove(courseNumber);

                // Show success message
                JOptionPane.showMessageDialog(this,
                    "Course deleted successfully!\n\n" +
                    "Course: " + courseNumber + "\n" +
                    "Semester: " + semester,
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

                // Refresh table to reflect deletion
                loadCourseData();

            } else {
                // Deletion failed - course not found
                JOptionPane.showMessageDialog(this,
                    "Failed to delete course!\n\n" +
                    "Course may have already been removed.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
    
    }//GEN-LAST:event_btnDeleteOfferActionPerformed

    private void btnSetScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetScheduleActionPerformed
        // TODO add your handling code here:
        // Validation: Check if row selected
        int row = tblCourseOffers.getSelectedRow();
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a course first!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get course info
        String courseNumber = (String) tblCourseOffers.getValueAt(row, 0);
        String courseName = (String) tblCourseOffers.getValueAt(row, 1);
        
        // Get current values
        String currentRoom = courseRooms.getOrDefault(courseNumber, "");
        String currentTime = courseSchedules.getOrDefault(courseNumber, "");
        
        // STEP 1: Get room number
        String room = (String) JOptionPane.showInputDialog(
            this,
            "Course: " + courseNumber + " - " + courseName + "\n\n" +
            "Current Room: " + (currentRoom.isEmpty() ? "Not Set" : currentRoom) + "\n\n" +
            "Enter room number (e.g., 101, Lab-A):",
            "Set Room",
            JOptionPane.QUESTION_MESSAGE,
            null,
            null,
            currentRoom
        );
        
        if (room == null) return;
        room = room.trim();
        
        // Validation: Room cannot be empty
        if (room.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Room number cannot be empty!",
                "Invalid Input",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // STEP 2: Get time schedule
        String time = (String) JOptionPane.showInputDialog(
            this,
            "Course: " + courseNumber + " - " + courseName + "\n\n" +
            "Current Schedule: " + (currentTime.isEmpty() ? "Not Set" : currentTime) + "\n\n" +
            "Enter time schedule:\n" +
            "Examples: Mon/Wed 10-12, Tue/Thu 2-4",
            "Set Schedule",
            JOptionPane.QUESTION_MESSAGE,
            null,
            null,
            currentTime
        );
        
        if (time == null) return;
        time = time.trim();
        
        // Validation: Time cannot be empty
        if (time.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Schedule cannot be empty!",
                "Invalid Input",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Save to HashMaps
        courseRooms.put(courseNumber, room);
        courseSchedules.put(courseNumber, time);
        
        // Show success
        JOptionPane.showMessageDialog(this,
            "Room and schedule set successfully!\n\n" +
            "Course: " + courseNumber + "\n" +
            "Room: " + room + "\n" +
            "Schedule: " + time,
            "Success",
            JOptionPane.INFORMATION_MESSAGE);
        
        // Refresh table
        loadCourseData();
        
    }//GEN-LAST:event_btnSetScheduleActionPerformed

    private void btnEnrollStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollStudentActionPerformed
        // TODO add your handling code here:
        String semester = (String) cmbEnrollSemester.getSelectedItem();
        
        // Get list of students
        ArrayList<StudentProfile> students = department.getStudentDirectory().getStudentList();
        
        // Validation: Check if students exist
        if (students.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No students in the system!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // STEP 1: Select student
        String[] studentOptions = new String[students.size()];
        for (int i = 0; i < students.size(); i++) {
            studentOptions[i] = "Student " + (i + 1);
        }
        
        String selectedStudent = (String) JOptionPane.showInputDialog(
            this,
            "Select student to enroll:",
            "Step 1: Choose Student",
            JOptionPane.QUESTION_MESSAGE,
            null,
            studentOptions,
            studentOptions[0]
        );
        
        if (selectedStudent == null) return;
        
        // Get actual student object
        int studentIndex = Integer.parseInt(selectedStudent.split(" ")[1]) - 1;
        StudentProfile student = students.get(studentIndex);
        
        // STEP 2: Get available courses
        CourseSchedule schedule = department.getCourseSchedule(semester);
        
        // Validation: Check if courses exist
        if (schedule == null) {
            JOptionPane.showMessageDialog(this,
                "No courses available for " + semester + "!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ArrayList<CourseOffer> allOffers = schedule.getSchedule();
        
        if (allOffers.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No course offers for " + semester + "!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Build list of courses with available seats
        ArrayList<String> availableCourses = new ArrayList<>();
        ArrayList<CourseOffer> availableOffers = new ArrayList<>();
        
        for (CourseOffer offer : allOffers) {
            Course course = offer.getSubjectCourse();
            
            // Count empty seats
            int emptySeats = 0;
            for (Seat seat : offer.getSeatList()) {
                if (!seat.isOccupied()) {
                    emptySeats++;
                }
            }
            
            // Only show courses with available seats
            if (emptySeats > 0) {
                String option = course.getCOurseNumber() + " - " + 
                              course.getCourseName() + 
                              " (" + emptySeats + " seats available)";
                availableCourses.add(option);
                availableOffers.add(offer);
            }
        }
        
        // Validation: Check if any courses have space
        if (availableCourses.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "All courses are full!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String[] courseOptions = availableCourses.toArray(new String[0]);
        
        // Let user select course
        String selectedCourse = (String) JOptionPane.showInputDialog(
            this,
            "Select course for enrollment:",
            "Step 2: Choose Course",
            JOptionPane.QUESTION_MESSAGE,
            null,
            courseOptions,
            courseOptions[0]
        );
        
        if (selectedCourse == null) return;
        
        // Get the selected course offer
        int courseIndex = availableCourses.indexOf(selectedCourse);
        CourseOffer selectedOffer = availableOffers.get(courseIndex);
        Course selectedCourseObj = selectedOffer.getSubjectCourse();
        
        // STEP 3: Enroll the student
        
        // Get or create course load for this semester
        CourseLoad courseLoad = student.getCourseLoadBySemester(semester);
        if (courseLoad == null) {
            courseLoad = student.newCourseLoad(semester);
        }
        
        // Create seat assignment (enrolls student)
        SeatAssignment enrollment = courseLoad.newSeatAssignment(selectedOffer);
        
        if (enrollment != null) {
            // Charge tuition
            double tuition = selectedCourseObj.getCoursePrice();
            financeManager.chargeTuitionForCourse(
                student, 
                tuition, 
                selectedCourseObj.getCOurseNumber(), 
                semester
            );
            
            // Show success
            JOptionPane.showMessageDialog(this,
                "Student enrolled successfully!\n\n" +
                "Student: " + selectedStudent + "\n" +
                "Course: " + selectedCourseObj.getCOurseNumber() + " - " + 
                selectedCourseObj.getCourseName() + "\n" +
                "Semester: " + semester + "\n" +
                "Tuition Charged: $" + tuition,
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            // CRITICAL: Track this enrollment for drop functionality
            // CRITICAL: Track this enrollment for drop functionality
            // CRITICAL: Track this enrollment for drop functionality
            Seat assignedSeat = enrollment.getSeat();
            
            // Use the student index we already calculated earlier
            String rowKey = "STU-" + String.format("%03d", studentIndex + 1);
            
            EnrollmentInfo info = new EnrollmentInfo(
                student, 
                selectedOffer, 
                assignedSeat, 
                semester
            );
            enrollmentTracker.put(rowKey, info);
            // Refresh table
            loadEnrollmentData();
            
        } else {
            JOptionPane.showMessageDialog(this,
                "Enrollment failed! Please try again.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnEnrollStudentActionPerformed

    private void btnDropStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropStudentActionPerformed
        // TODO add your handling code here:
        int row = tblEnrollment.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select an enrollment record!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get data from table
        String rowKey = (String) tblEnrollment.getValueAt(row, 0);
        String studentName = (String) tblEnrollment.getValueAt(row, 1);
        String courseNumber = (String) tblEnrollment.getValueAt(row, 2);
        String courseName = (String) tblEnrollment.getValueAt(row, 3);

        // Get enrollment info from tracker
        EnrollmentInfo info = enrollmentTracker.get(rowKey);

        if (info == null) {
            JOptionPane.showMessageDialog(this,
                "Enrollment information not found!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm drop
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Drop student from course?\n\n" +
            "Student: " + studentName + "\n" +
            "Course: " + courseNumber + " - " + courseName + "\n\n" +
            "This will:\n" +
            "- Remove student from course\n" +
            "- Free up the seat\n" +
            "- Issue tuition refund\n\n" +
            "Continue?",
            "Confirm Drop",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Course course = info.offer.getSubjectCourse();
                double refundAmount = course.getCoursePrice();

                // STEP 1: Remove seat assignment from student's course load
                CourseLoad courseLoad = info.student.getCourseLoadBySemester(info.semester);

                if (courseLoad != null) {
                    ArrayList<SeatAssignment> assignments = courseLoad.getSeatAssignments();
                    SeatAssignment toRemove = null;

                    // Find the seat assignment to remove
                    for (SeatAssignment sa : assignments) {
                        if (sa.getSeat() == info.seat) {
                            toRemove = sa;
                            break;
                        }
                    }

                    // Remove it
                    if (toRemove != null) {
                        assignments.remove(toRemove);
                    }
                }

                // STEP 2: Free the seat (mark as unoccupied)
                // We need to set the seat as unoccupied and clear the assignment
                // Since Seat class doesn't have a method for this, we'll use reflection of the seat's fields
                info.seat.freeSeat();

                // STEP 3: Issue refund
                financeManager.issueRefund(
                    info.student,
                    refundAmount,
                    course.getCOurseNumber(),
                    info.semester
                );

                // STEP 4: Remove from tracker
                enrollmentTracker.remove(rowKey);

                // Show success
                JOptionPane.showMessageDialog(this,
                    "Student dropped successfully!\n\n" +
                    "Student: " + studentName + "\n" +
                    "Course: " + courseNumber + "\n" +
                    "Refund Issued: $" + refundAmount,
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

                // STEP 5: Refresh table (student should disappear!)
                loadEnrollmentData();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Error dropping student: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_btnDropStudentActionPerformed

    private void btnRefreshCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshCoursesActionPerformed
        // TODO add your handling code here:
        // Reload course data
        loadCourseData();

        // Show confirmation message
        JOptionPane.showMessageDialog(this,
            "Course data refreshed successfully!",
            "Success",
            JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_btnRefreshCoursesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignFaculty;
    private javax.swing.JButton btnCancelProfile;
    private javax.swing.JButton btnCreateOffer;
    private javax.swing.JButton btnDeleteOffer;
    private javax.swing.JButton btnDropStudent;
    private javax.swing.JButton btnEditProfile;
    private javax.swing.JButton btnEnrollStudent;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JButton btnGenerateReportData;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefreshCourses;
    private javax.swing.JButton btnRefreshFinancial;
    private javax.swing.JButton btnSaveProfile;
    private javax.swing.JButton btnSetSchedule;
    private javax.swing.JButton btnUpdateCapacity;
    private javax.swing.JComboBox<String> cmbEnrollCourse;
    private javax.swing.JComboBox<String> cmbEnrollSemester;
    private javax.swing.JComboBox<String> cmbFinancialSemester;
    private javax.swing.JComboBox<String> cmbReportSemester;
    private javax.swing.JComboBox<String> cmbReportType;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblPaymentRate;
    private javax.swing.JLabel lblTotalOutstanding;
    private javax.swing.JLabel lblTotalRevenue;
    private javax.swing.JPanel panelCourseOfferings;
    private javax.swing.JPanel panelEnrollment;
    private javax.swing.JPanel panelFinancials;
    private javax.swing.JPanel panelProfile;
    private javax.swing.JPanel panelReports;
    private javax.swing.JTabbedPane registrarTabs;
    private javax.swing.JTable tblCourseOffers;
    private javax.swing.JTable tblEnrollment;
    private javax.swing.JTable tblFinancials;
    private javax.swing.JTable tblReports;
    private javax.swing.JTextField txtProfileDepartment;
    private javax.swing.JTextField txtProfileEmail;
    private javax.swing.JTextField txtProfileHours;
    private javax.swing.JTextField txtProfileId;
    private javax.swing.JTextField txtProfileName;
    private javax.swing.JTextField txtProfileOffice;
    private javax.swing.JTextField txtProfilePhone;
    // End of variables declaration//GEN-END:variables
    
    private void setupTab1() {
        
        
        // Populate semester dropdown
        cmbSemester.removeAllItems();
        cmbSemester.addItem("Fall2024");
        cmbSemester.addItem("Spring2025");
        cmbSemester.addItem("Summer2025");
        cmbSemester.addItem("Fall2025");
        
        // Add listener to reload data when semester changes
        cmbSemester.addActionListener(evt -> loadCourseData());
        
        // Load initial data
        loadCourseData();
        
        
    }
    
    private void loadCourseData() {
        // Get table model
        DefaultTableModel model = (DefaultTableModel) tblCourseOffers.getModel();
        model.setRowCount(0); // Clear existing rows
        
        // Get selected semester
        String semester = (String) cmbSemester.getSelectedItem();
        if (semester == null) return;
        
        // Get course schedule for this semester
        CourseSchedule schedule = department.getCourseSchedule(semester);
        if (schedule == null) return;
        
        // Loop through each course offer and add to table
        for (CourseOffer offer : schedule.getSchedule()) {
            Course course = offer.getSubjectCourse();
            
            // Calculate enrollment statistics
            int capacity = offer.getSeatList().size();
            int enrolled = 0;
            for (Seat seat : offer.getSeatList()) {
                if (seat.isOccupied()) {
                    enrolled++;
                }
            }
            
            // Check if faculty is assigned
            String faculty = "Not Assigned";
            try {
                if (offer.getFacultyProfile() != null) {
                    faculty = "Assigned";
                }
            } catch (Exception e) {
                faculty = "Not Assigned";
            }
            
            // Get room and schedule from HashMap
            String room = courseRooms.getOrDefault(course.getCOurseNumber(), "Not Set");
            String time = courseSchedules.getOrDefault(course.getCOurseNumber(), "Not Set");
            
            // Add row to table
            model.addRow(new Object[]{
                course.getCOurseNumber(),
                course.getCourseName(),
                faculty,
                capacity,
                enrolled,
                room,
                time
            });
        }
    
    }
    
        private void setupTab2() {
            // Populate semester dropdown
            cmbEnrollSemester.removeAllItems();
            cmbEnrollSemester.addItem("Fall2024");
            cmbEnrollSemester.addItem("Spring2025");
            cmbEnrollSemester.addItem("Summer2025");

            // When semester changes, reload course filter options
            cmbEnrollSemester.addActionListener(evt -> loadEnrollmentCourseFilter());

            // When course filter changes, reload table
            cmbEnrollCourse.addActionListener(evt -> loadEnrollmentData());

            // Load initial data
            loadEnrollmentCourseFilter();
        }
    
        private void loadEnrollmentCourseFilter() {
            // Clear course dropdown
            cmbEnrollCourse.removeAllItems();
            cmbEnrollCourse.addItem("All Courses");

            // Get selected semester
            String semester = (String) cmbEnrollSemester.getSelectedItem();
            if (semester == null) return;

            // Get courses for this semester
            CourseSchedule schedule = department.getCourseSchedule(semester);
            if (schedule == null) return;

            // Add each course to dropdown
            for (CourseOffer offer : schedule.getSchedule()) {
                Course course = offer.getSubjectCourse();
                cmbEnrollCourse.addItem(course.getCOurseNumber());
            }

            // Load enrollment data
            loadEnrollmentData();

        }
    
        private void loadEnrollmentData() {
        // Get table model
        DefaultTableModel model = (DefaultTableModel) tblEnrollment.getModel();
        model.setRowCount(0); // Clear table

        // Get filter values
        String semester = (String) cmbEnrollSemester.getSelectedItem();
        String courseFilter = (String) cmbEnrollCourse.getSelectedItem();

        // Null checks
        if (semester == null) return;

        // Get course schedule
        CourseSchedule schedule = department.getCourseSchedule(semester);
        if (schedule == null) return;

        // Get all students
        ArrayList<StudentProfile> allStudents = department.getStudentDirectory().getStudentList();

        // Loop through all students
        for (int i = 0; i < allStudents.size(); i++) {
            StudentProfile student = allStudents.get(i);

            // Get student's course load for this semester
            CourseLoad courseLoad = student.getCourseLoadBySemester(semester);
            if (courseLoad == null) continue;

            // Check each seat assignment
            ArrayList<SeatAssignment> assignments = courseLoad.getSeatAssignments();

            for (SeatAssignment sa : assignments) {
                Course course = sa.getAssociatedCourse();

                // Apply course filter (WITH NULL CHECK)
                if (courseFilter != null && 
                    !courseFilter.equals("All Courses") && 
                    !course.getCOurseNumber().equals(courseFilter)) {
                    continue; // Skip this course
                }

                // Generate student display info
                String studentId = "STU-" + String.format("%03d", i + 1);
                String studentName = "Student " + (i + 1);

                // Add real enrollment record to table
                model.addRow(new Object[]{
                    studentId,
                    studentName,
                    course.getCOurseNumber(),
                    course.getCourseName()
                });

                // CRITICAL: Track this enrollment for drop functionality
                CourseOffer offer = sa.getCourseOffer();
                Seat seat = sa.getSeat();

                EnrollmentInfo info = new EnrollmentInfo(
                    student,
                    offer,
                    seat,
                    semester
                );
                enrollmentTracker.put(studentId, info);
            }
        }
    }
        private void setupTab3() {
            // Populate semester dropdown
            cmbFinancialSemester.removeAllItems();
            cmbFinancialSemester.addItem("Fall2024");
            cmbFinancialSemester.addItem("Spring2025");
            cmbFinancialSemester.addItem("Summer2025");
            cmbFinancialSemester.addItem("Fall2025");

            // Add action listeners
            cmbFinancialSemester.addActionListener(evt -> loadFinancialData());

            btnRefreshFinancial.addActionListener(evt -> {
                loadFinancialData();
                JOptionPane.showMessageDialog(this,
                    "Financial data refreshed!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            });

            btnGenerateReport.addActionListener(evt -> generateFinancialReport());

            // Load initial data
            loadFinancialData();
        }
        
        private void loadFinancialData() {
    // Get table model
    DefaultTableModel model = (DefaultTableModel) tblFinancials.getModel();
    model.setRowCount(0); // Clear table
    
    // Get selected semester
    String semester = (String) cmbFinancialSemester.getSelectedItem();
    if (semester == null) return;
    
    // Initialize totals
    double totalRevenue = 0.0;
    double totalOutstanding = 0.0;
    int totalStudents = 0;
    int paidStudents = 0;
    
    // Get all students
    ArrayList<StudentProfile> allStudents = department.getStudentDirectory().getStudentList();
    
    // Loop through each student
    for (int i = 0; i < allStudents.size(); i++) {
        StudentProfile student = allStudents.get(i);
        
        // Get student's course load for this semester
        CourseLoad courseLoad = student.getCourseLoadBySemester(semester);
        if (courseLoad == null) continue; // Skip if not enrolled this semester
        
        // Calculate charges for this semester
        double semesterCharges = 0.0;
        ArrayList<SeatAssignment> assignments = courseLoad.getSeatAssignments();
        
        for (SeatAssignment sa : assignments) {
            Course course = sa.getAssociatedCourse();
            semesterCharges += course.getCoursePrice();
        }
        
        // Skip if no charges
        if (semesterCharges == 0) continue;
        
        totalStudents++;
        
        // Get payment info from FinanceManager
        TuitionAccount account = financeManager.getStudentAccount(student);
        double totalPaid = account.getTotalPaid();
        double balance = account.getBalance();
        
        // Determine status
        String status;
        if (balance <= 0) {
            status = "Paid";
            paidStudents++;
        } else if (totalPaid > 0) {
            status = "Partial";
        } else {
            status = "Unpaid";
        }
        
        // Update totals
        totalRevenue += totalPaid;
        totalOutstanding += (balance > 0 ? balance : 0);
        
        // Generate display info
        String studentId = "STU-" + String.format("%03d", i + 1);
        String studentName = "Student " + (i + 1);
        
        // Add row to table
        model.addRow(new Object[]{
            studentId,
            studentName,
            String.format("$%.2f", semesterCharges),
            String.format("$%.2f", totalPaid),
            String.format("$%.2f", balance),
            status
        });
    }
    
    // Update summary labels
    lblTotalRevenue.setText(String.format("Total Revenue: $%.2f", totalRevenue));
    lblTotalOutstanding.setText(String.format("Total Outstanding: $%.2f", totalOutstanding));
    
    // Calculate payment rate
    double paymentRate = totalStudents > 0 ? (paidStudents * 100.0 / totalStudents) : 0.0;
    lblPaymentRate.setText(String.format("Payment Rate: %.1f%%", paymentRate));
}
        
        private void generateFinancialReport() {
            String semester = (String) cmbFinancialSemester.getSelectedItem();
            if (semester == null) return;

            // Generate report using FinanceManager
            FinancialReport report = financeManager.generateSemesterReport(semester, department.toString());

            // Build report message
            StringBuilder reportText = new StringBuilder();
            reportText.append("FINANCIAL REPORT - ").append(semester).append("\n");
            reportText.append("=" .repeat(50)).append("\n\n");

            reportText.append("ENROLLMENT STATISTICS:\n");
            reportText.append(String.format("  Total Students Enrolled: %d\n", report.getTotalStudents()));
            reportText.append(String.format("  Students with Paid Tuition: %d\n", report.getPaidStudents()));
            reportText.append(String.format("  Payment Rate: %.1f%%\n\n", report.getPaymentRate()));

            reportText.append("FINANCIAL SUMMARY:\n");
            reportText.append(String.format("  Total Revenue Collected: $%.2f\n", report.getTotalRevenue()));
            reportText.append(String.format("  Outstanding Balance: $%.2f\n", report.getTotalOutstanding()));
            reportText.append(String.format("  Collection Rate: %.1f%%\n\n", report.getCollectionRate()));

            reportText.append("DEPARTMENT BREAKDOWN:\n");
            for (Map.Entry<String, Double> entry : report.getDepartmentRevenue().entrySet()) {
                reportText.append(String.format("  %s: $%.2f\n", entry.getKey(), entry.getValue()));
            }

            reportText.append("\n").append("=".repeat(50)).append("\n");
            reportText.append("Report Generated: ").append(java.time.LocalDateTime.now()).append("\n");

            // Show report in dialog
            javax.swing.JTextArea textArea = new javax.swing.JTextArea(reportText.toString());
            textArea.setEditable(false);
            textArea.setFont(new java.awt.Font("Monospaced", java.awt.Font.PLAIN, 12));

            javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(textArea);
            scrollPane.setPreferredSize(new java.awt.Dimension(600, 400));

            JOptionPane.showMessageDialog(this,
                scrollPane,
                "Financial Report - " + semester,
                JOptionPane.INFORMATION_MESSAGE);
        }
        
        
    
    
    
    
    

    
}
