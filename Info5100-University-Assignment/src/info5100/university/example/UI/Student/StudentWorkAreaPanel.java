/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UI.Student;

import info5100.university.example.AccessControl.AuthenticationService;
import info5100.university.example.AccessControl.User;
import info5100.university.example.AccessControl.UserDirectory;
import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department;
import info5100.university.example.Finance.FinanceManager;
import info5100.university.example.Finance.TuitionAccount;
import info5100.university.example.Grading.GradeCalculator;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.StudentProfile;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 * Student Work Area Panel
 * @author Student Module Developer Nikhil
 */
public class StudentWorkAreaPanel extends javax.swing.JPanel {
    
    private Department department;
    private UserDirectory userDirectory;
    private FinanceManager financeManager;
    private JPanel cardPanel;
    private AuthenticationService authService;
    private StudentProfile currentStudent;
    
    // Constants for MSIS Program
    private static final int REQUIRED_CREDIT_HOURS = 32;
    private static final int MAX_CREDITS_PER_SEMESTER = 8;
    private static final String CORE_COURSE = "INFO5100";
    private static final int CORE_COURSE_CREDITS = 4;

      
    /**
     * Creates new form StudentWorkAreaPanel
     */
    public StudentWorkAreaPanel(Department dept, UserDirectory userDir, 
                                FinanceManager finMgr, 
                                JPanel parentCardPanel,
                                AuthenticationService auth,
                                StudentProfile student) {
        
        this.department = dept;
        this.userDirectory = userDir;
        this.financeManager = finMgr;
        this.cardPanel = parentCardPanel;
        this.authService = auth;
        this.currentStudent = student;
        
        initComponents();
        
        setupTabs();
        loadStudentInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        studentTabs = new javax.swing.JTabbedPane();
        panelCourseRegistration = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbRegSemester = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnShowAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnEnroll = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        lblCreditWarning = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        panelTranscript = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmbTranscriptSemester = new javax.swing.JComboBox<>();
        btnExportTranscript = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblOverallGPA = new javax.swing.JLabel();
        lblTotalCredits = new javax.swing.JLabel();
        lblAcademicStanding = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTranscript = new javax.swing.JTable();
        panelGraduationAudit = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        lblGradStatus = new javax.swing.JLabel();
        lblCreditsCompleted = new javax.swing.JLabel();
        lblCreditsRemaining = new javax.swing.JLabel();
        lblCoreStatus = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblGradRequirements = new javax.swing.JTable();
        panelFinancial = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        lblCurrentBalance = new javax.swing.JLabel();
        lblTotalPaid = new javax.swing.JLabel();
        lblPaymentStatus = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnPayTuition = new javax.swing.JButton();
        btnViewStatement = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPaymentHistory = new javax.swing.JTable();
        panelAssignments = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmbAssignmentCourse = new javax.swing.JComboBox<>();
        btnRefreshAssignments = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        btnSubmitAssignment = new javax.swing.JButton();
        btnViewGrades = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblAssignments = new javax.swing.JTable();
        panelProfile = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        btnEditProfile = new javax.swing.JButton();
        btnSaveProfile = new javax.swing.JButton();
        btnCancelEdit = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtProgram = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtAdvisor = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());


                // Course Registration Tab
        panelCourseRegistration.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Semester:");
        jPanel1.add(jLabel1);

        cmbRegSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fall2024", "Spring2025", "Summer2025" }));
        jPanel1.add(cmbRegSemester);

        jLabel2.setText("Search by:");
        jPanel1.add(jLabel2);

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course ID", "Course Name", "Instructor" }));
        jPanel1.add(cmbSearchType);

        txtSearch.setPreferredSize(new java.awt.Dimension(150, 25));
        jPanel1.add(txtSearch);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch);

        btnShowAll.setText("Show All");
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowAll);

        panelCourseRegistration.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        btnEnroll.setText("Enroll in Selected Course");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });
        jPanel2.add(btnEnroll);

        btnDrop.setText("Drop Selected Course");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });
        jPanel2.add(btnDrop);

        lblCreditWarning.setText("Current Credits: 0 / 8 max per semester");
        jPanel2.add(lblCreditWarning);

        panelCourseRegistration.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Course ID", "Course Name", "Instructor", "Credits", "Schedule", "Seats Available", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourses);

        panelCourseRegistration.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        studentTabs.addTab("Course Registration", panelCourseRegistration);

        // Transcript Tab
        panelTranscript.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("View by Semester:");
        jPanel3.add(jLabel3);

        cmbTranscriptSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Semesters", "Fall2024", "Spring2025", "Summer2025" }));
        cmbTranscriptSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTranscriptSemesterActionPerformed(evt);
            }
        });
        jPanel3.add(cmbTranscriptSemester);

        btnExportTranscript.setText("Export Transcript");
        btnExportTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTranscriptActionPerformed(evt);
            }
        });
        jPanel3.add(btnExportTranscript);

        panelTranscript.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.GridLayout(1, 3, 10, 0));

        lblOverallGPA.setText("Overall GPA: 0.00");
        lblOverallGPA.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jPanel4.add(lblOverallGPA);

        lblTotalCredits.setText("Total Credits: 0");
        lblTotalCredits.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jPanel4.add(lblTotalCredits);

        lblAcademicStanding.setText("Academic Standing: Good Standing");
        lblAcademicStanding.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jPanel4.add(lblAcademicStanding);

        panelTranscript.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        tblTranscript.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Term", "Course ID", "Course Name", "Grade", "Credits", "Quality Points", "Term GPA", "Overall GPA", "Standing"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTranscript);

        panelTranscript.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        studentTabs.addTab("Transcript", panelTranscript);

        // Graduation Audit Tab
        panelGraduationAudit.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 5, 5));

        lblGradStatus.setText("Graduation Status: NOT READY");
        lblGradStatus.setFont(new java.awt.Font("Segoe UI", 1, 16));
        jPanel5.add(lblGradStatus);

        lblCreditsCompleted.setText("Credits Completed: 0 / 32");
        jPanel5.add(lblCreditsCompleted);

        lblCreditsRemaining.setText("Credits Remaining: 32");
        jPanel5.add(lblCreditsRemaining);

        lblCoreStatus.setText("Core Course (INFO5100): Not Completed");
        jPanel5.add(lblCoreStatus);

        panelGraduationAudit.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel6.setLayout(new java.awt.BorderLayout());

        progressBar.setMaximum(32);
        progressBar.setStringPainted(true);
        jPanel6.add(progressBar, java.awt.BorderLayout.CENTER);

        jLabel4.setText("Progress to Graduation:");
        jPanel6.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        panelGraduationAudit.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        tblGradRequirements.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Requirement", "Required", "Completed", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblGradRequirements);

        panelGraduationAudit.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        studentTabs.addTab("Graduation Audit", panelGraduationAudit);


               // Financial Tab
        panelFinancial.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        lblCurrentBalance.setText("Current Balance: $0.00");
        lblCurrentBalance.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jPanel7.add(lblCurrentBalance);

        lblTotalPaid.setText("Total Paid: $0.00");
        lblTotalPaid.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jPanel7.add(lblTotalPaid);

        lblPaymentStatus.setText("Payment Status: No Outstanding Balance");
        lblPaymentStatus.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jPanel7.add(lblPaymentStatus);

        panelFinancial.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        btnPayTuition.setText("Pay Tuition");
        btnPayTuition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayTuitionActionPerformed(evt);
            }
        });
        jPanel8.add(btnPayTuition);

        btnViewStatement.setText("View Statement");
        btnViewStatement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewStatementActionPerformed(evt);
            }
        });
        jPanel8.add(btnViewStatement);

        panelFinancial.add(jPanel8, java.awt.BorderLayout.PAGE_END);

        tblPaymentHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Date", "Description", "Amount", "Type", "Balance After"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblPaymentHistory);

        panelFinancial.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        studentTabs.addTab("Financial", panelFinancial);

                // Assignments Tab
        panelAssignments.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Select Course:");
        jPanel9.add(jLabel5);

        cmbAssignmentCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAssignmentCourseActionPerformed(evt);
            }
        });
        jPanel9.add(cmbAssignmentCourse);

        btnRefreshAssignments.setText("Refresh");
        btnRefreshAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshAssignmentsActionPerformed(evt);
            }
        });
        jPanel9.add(btnRefreshAssignments);

        panelAssignments.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        btnSubmitAssignment.setText("Submit Assignment");
        btnSubmitAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitAssignmentActionPerformed(evt);
            }
        });
        jPanel10.add(btnSubmitAssignment);

        btnViewGrades.setText("View Grades");
        btnViewGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewGradesActionPerformed(evt);
            }
        });
        jPanel10.add(btnViewGrades);

        panelAssignments.add(jPanel10, java.awt.BorderLayout.PAGE_END);

        tblAssignments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Assignment", "Due Date", "Status", "Grade", "Points", "Feedback"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblAssignments);

        panelAssignments.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        studentTabs.addTab("Assignments", panelAssignments);

        // Profile Tab
        panelProfile.setLayout(new java.awt.BorderLayout());

        btnEditProfile.setText("Edit Profile");
        btnEditProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditProfileActionPerformed(evt);
            }
        });
        jPanel11.add(btnEditProfile);

        btnSaveProfile.setText("Save Changes");
        btnSaveProfile.setEnabled(false);
        btnSaveProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProfileActionPerformed(evt);
            }
        });
        jPanel11.add(btnSaveProfile);

        btnCancelEdit.setText("Cancel");
        btnCancelEdit.setEnabled(false);
        btnCancelEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelEditActionPerformed(evt);
            }
        });
        jPanel11.add(btnCancelEdit);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        jPanel11.add(btnLogout);

        panelProfile.add(jPanel11, java.awt.BorderLayout.PAGE_END);

        jPanel12.setLayout(new java.awt.GridLayout(7, 2, 10, 10));

        jLabel6.setText("Name:");
        jPanel12.add(jLabel6);
        txtName.setEditable(false);
        jPanel12.add(txtName);

        jLabel7.setText("Student ID:");
        jPanel12.add(jLabel7);
        txtStudentId.setEditable(false);
        jPanel12.add(txtStudentId);

        jLabel8.setText("Email:");
        jPanel12.add(jLabel8);
        txtEmail.setEditable(false);
        jPanel12.add(txtEmail);

        jLabel9.setText("Phone:");
        jPanel12.add(jLabel9);
        txtPhone.setEditable(false);
        jPanel12.add(txtPhone);

        jLabel10.setText("Address:");
        jPanel12.add(jLabel10);
        txtAddress.setEditable(false);
        jPanel12.add(txtAddress);

        jLabel11.setText("Program:");
        jPanel12.add(jLabel11);
        txtProgram.setEditable(false);
        jPanel12.add(txtProgram);

        jLabel12.setText("Academic Advisor:");
        jPanel12.add(jLabel12);
        txtAdvisor.setEditable(false);
        jPanel12.add(txtAdvisor);

        panelProfile.add(jPanel12, java.awt.BorderLayout.CENTER);

        studentTabs.addTab("Profile", panelProfile);

        add(studentTabs, java.awt.BorderLayout.CENTER);
    }// </editor-fold>                        

    // Event Handlers
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
        searchCourses();
    }

    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {
        loadAvailableCourses();
    }

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {
        enrollInCourse();
    }

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {
        dropCourse();
    }

    private void cmbTranscriptSemesterActionPerformed(java.awt.event.ActionEvent evt) {
        loadTranscript();
    }

    private void btnExportTranscriptActionPerformed(java.awt.event.ActionEvent evt) {
        exportTranscript();
    }

    private void btnPayTuitionActionPerformed(java.awt.event.ActionEvent evt) {
        payTuition();
    }

    private void btnViewStatementActionPerformed(java.awt.event.ActionEvent evt) {
        viewFinancialStatement();
    }

    private void cmbAssignmentCourseActionPerformed(java.awt.event.ActionEvent evt) {
        loadAssignments();
    }

    private void btnRefreshAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {
        loadAssignments();
    }

    private void btnSubmitAssignmentActionPerformed(java.awt.event.ActionEvent evt) {
        submitAssignment();
    }

    private void btnViewGradesActionPerformed(java.awt.event.ActionEvent evt) {
        viewGrades();
    }

    private void btnEditProfileActionPerformed(java.awt.event.ActionEvent evt) {
        enableProfileEditing(true);
    }

    private void btnSaveProfileActionPerformed(java.awt.event.ActionEvent evt) {
        saveProfile();
    }

    private void btnCancelEditActionPerformed(java.awt.event.ActionEvent evt) {
        loadProfileData();
        enableProfileEditing(false);
    }

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {
        logout();
    }

    // Setup methods
    private void setupTabs() {
        // Setup all tabs
        setupCourseRegistrationTab();
        setupTranscriptTab();
        setupGraduationAuditTab();
        setupFinancialTab();
        setupAssignmentsTab();
        setupProfileTab();
    }

    private void setupCourseRegistrationTab() {
        cmbRegSemester.addActionListener(evt -> loadAvailableCourses());
        loadAvailableCourses();
        updateCreditWarning();
    }

    private void setupTranscriptTab() {
        loadTranscript();
        updateGPAandStanding();
    }

    private void setupGraduationAuditTab() {
        loadGraduationAudit();
    }

    private void setupFinancialTab() {
        loadFinancialData();
    }

    private void setupAssignmentsTab() {
        loadEnrolledCourses();
        loadAssignments();
    }

    private void setupProfileTab() {
        loadProfileData();
    }

    private void loadStudentInfo() {
        if (currentStudent != null) {
            // Set welcome message or student info
        }
    }

        // Course Registration Methods
    private void loadAvailableCourses() {
        DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
        model.setRowCount(0);
        
        String semester = (String) cmbRegSemester.getSelectedItem();
        if (semester == null) return;
        
        CourseSchedule schedule = department.getCourseSchedule(semester);
        if (schedule == null) return;
        
        // Get student's current enrollments
        CourseLoad currentLoad = currentStudent.getCourseLoadBySemester(semester);
        ArrayList<String> enrolledCourseIds = new ArrayList<>();
        
        if (currentLoad != null) {
            for (SeatAssignment sa : currentLoad.getSeatAssignments()) {
                enrolledCourseIds.add(sa.getAssociatedCourse().getCOurseNumber());
            }
        }
        
        for (CourseOffer offer : schedule.getSchedule()) {
            Course course = offer.getSubjectCourse();
            
            // Count available seats
            int availableSeats = 0;
            for (Seat seat : offer.getSeatList()) {
                if (!seat.isOccupied()) {
                    availableSeats++;
                }
            }
            
            // Get faculty name
            String facultyName = "TBA";
            if (offer.getFacultyProfile() != null) {
                facultyName = "Faculty Assigned";
            }
            
            // Determine enrollment status
            String status = enrolledCourseIds.contains(course.getCOurseNumber()) ? 
                           "Enrolled" : "Available";
            
            model.addRow(new Object[]{
                course.getCOurseNumber(),
                course.getCourseName(),
                facultyName,
                course.getCredits(),
                "Mon/Wed 10-12", // Placeholder schedule
                availableSeats,
                status
            });
        }
    }

    private void searchCourses() {
        String searchType = (String) cmbSearchType.getSelectedItem();
        String searchText = txtSearch.getText().trim().toLowerCase();
        
        if (searchText.isEmpty()) {
            loadAvailableCourses();
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
        model.setRowCount(0);
        
        String semester = (String) cmbRegSemester.getSelectedItem();
        CourseSchedule schedule = department.getCourseSchedule(semester);
        if (schedule == null) return;
        
        for (CourseOffer offer : schedule.getSchedule()) {
            Course course = offer.getSubjectCourse();
            boolean match = false;
            
            switch (searchType) {
                case "Course ID":
                    match = course.getCOurseNumber().toLowerCase().contains(searchText);
                    break;
                case "Course Name":
                    match = course.getCourseName().toLowerCase().contains(searchText);
                    break;
                case "Instructor":
                    if (offer.getFacultyProfile() != null) {
                        match = true; // Simplified - would need faculty name
                    }
                    break;
            }
            
            if (match) {
                // Count available seats
                int availableSeats = 0;
                for (Seat seat : offer.getSeatList()) {
                    if (!seat.isOccupied()) {
                        availableSeats++;
                    }
                }
                
                String facultyName = offer.getFacultyProfile() != null ? 
                                   "Faculty Assigned" : "TBA";
                
                model.addRow(new Object[]{
                    course.getCOurseNumber(),
                    course.getCourseName(),
                    facultyName,
                    course.getCredits(),
                    "Mon/Wed 10-12",
                    availableSeats,
                    "Available"
                });
            }
        }
    }

    private void enrollInCourse() {
        int row = tblCourses.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a course to enroll!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String courseId = (String) tblCourses.getValueAt(row, 0);
        String status = (String) tblCourses.getValueAt(row, 6);
        
        if (status.equals("Enrolled")) {
            JOptionPane.showMessageDialog(this,
                "You are already enrolled in this course!",
                "Already Enrolled",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String semester = (String) cmbRegSemester.getSelectedItem();
        CourseSchedule schedule = department.getCourseSchedule(semester);
        CourseOffer offer = schedule.getCourseOfferByNumber(courseId);
        
        if (offer == null) {
            JOptionPane.showMessageDialog(this,
                "Course offer not found!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check credit hour limit
        CourseLoad currentLoad = currentStudent.getCourseLoadBySemester(semester);
        if (currentLoad == null) {
            currentLoad = currentStudent.newCourseLoad(semester);
        }
        
        int currentCredits = 0;
        for (SeatAssignment sa : currentLoad.getSeatAssignments()) {
            currentCredits += sa.getAssociatedCourse().getCredits();
        }
        
        Course course = offer.getSubjectCourse();
        if (currentCredits + course.getCredits() > MAX_CREDITS_PER_SEMESTER) {
            JOptionPane.showMessageDialog(this,
                "Cannot enroll! This would exceed the maximum 8 credits per semester.\n" +
                "Current Credits: " + currentCredits + "\n" +
                "Course Credits: " + course.getCredits(),
                "Credit Limit Exceeded",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Enroll the student
        SeatAssignment enrollment = currentLoad.newSeatAssignment(offer);
        
        if (enrollment != null) {
            // Charge tuition
            double tuition = course.getCoursePrice();
            financeManager.chargeTuitionForCourse(
                currentStudent,
                tuition,
                course.getCOurseNumber(),
                semester
            );
            
            JOptionPane.showMessageDialog(this,
                "Successfully enrolled in " + course.getCOurseNumber() + "!\n" +
                "Tuition charged: $" + tuition,
                "Enrollment Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            loadAvailableCourses();
            updateCreditWarning();
            loadFinancialData();
        } else {
            JOptionPane.showMessageDialog(this,
                "No seats available for this course!",
                "Enrollment Failed",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void dropCourse() {
        int row = tblCourses.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a course to drop!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String courseId = (String) tblCourses.getValueAt(row, 0);
        String status = (String) tblCourses.getValueAt(row, 6);
        
        if (!status.equals("Enrolled")) {
            JOptionPane.showMessageDialog(this,
                "You are not enrolled in this course!",
                "Not Enrolled",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
